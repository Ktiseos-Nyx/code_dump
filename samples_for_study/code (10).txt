{
    "parser_name": "A1111 WebUI (Standard PNG Info)",
    "priority": 110, // Higher than generic, adjust as needed
    "target_file_types": ["PNG", "JPEG"], // A1111 can save to JPEG with EXIF UserComment too
    "detection_rules": [
        // Rule for PNG tEXt chunk "parameters"
        {
            "condition": "OR", // Start of an OR block for multiple sources
            "rules": [
                {
                    "comment": "Rule 1a: PNG chunk 'parameters' contains the A1111 string.",
                    "source_type": "pil_info_key",
                    "source_key": "parameters", // The tEXt chunk name in PNGs
                    "operator": "exists"
                },
                {
                    "comment": "Rule 1b: EXIF UserComment contains the A1111 string (for JPEGs).",
                    "source_type": "exif_user_comment",
                    "operator": "exists"
                }
            ]
        },
        {
            "comment": "Rule 2: The string (from either source) should contain 'Steps:' and 'CFG scale:' and 'Seed:'.",
            "source_type": "auto_detect_parameters_or_usercomment", // Special source that tries both
            "operator": "regex_match_all", // New operator: all patterns must match
            "regex_patterns": [
                "Steps:",
                "CFG scale:",
                "Seed:"
                // Could add "Sampler:" too
            ]
        },
        {
            "comment": "Rule 3: Differentiate from simple Fooocus - check for 'Negative prompt:' line or Hires params.",
            "source_type": "auto_detect_parameters_or_usercomment",
            "operator": "regex_match_any", // Any of these indicates more A1111-like
            "regex_patterns": [
                "Negative prompt:",
                "Hires upscale:",
                "Denoising strength:",
                "Clip skip:" // Clip skip is more A1111/Forge
            ],
            "optional": false // Make this a firm requirement to distinguish
        }
    ],
    "parsing_instructions": {
        "input_data": {
            // The engine needs to be smart here: if PNG, use pil_info["parameters"],
            // if JPEG, use context_data["raw_user_comment_str"].
            // We can define multiple potential sources and the engine uses the first one found.
            "source_options": [
                { "source_type": "pil_info_key", "source_key": "parameters"}, // For PNG
                { "source_type": "exif_user_comment"}                       // For JPEG
            ],
            "transformations": [
                // If the source is pil_info["parameters"] and it's {"parameters": "actual_string"},
                // we need to extract "actual_string".
                // This assumes the outer {"parameters": "..."} JSON is already handled if the
                // 'parameters' chunk itself IS that JSON.
                // If pil_info["parameters"] directly contains the A1111 string (not wrapped in JSON),
                // then no transformation is needed here.
                // Let's assume for this definition, the "input_data" string IS the A1111 param string directly.
                // If it's sometimes wrapped, the "source_options" might need a "json_path" for the PNG case.

                // Example: If PNG chunk "parameters" contains '{"parameters": "A1111_string..."}'
                // {
                //     "type": "conditional_json_decode_string_value",
                //     "condition_source_type": "pil_info_key", // Check if source was from pil_info
                //     "condition_source_key": "parameters",
                //     "path": "parameters" // Only apply if the source was pil_info["parameters"] AND it's JSON
                // }
                // For now, assume the engine's context preparation gives the direct A1111 string.
            ]
        },
        "fields": [
            // Positive and Negative Prompt Extraction
            {
                "target_key": "prompt",
                "method": "a1111_extract_prompt_positive" // Special method for A1111's structure
            },
            {
                "target_key": "negative_prompt",
                "method": "a1111_extract_prompt_negative" // Special method
            },
            // Key-Value Parameter Extraction from the part *after* prompts
            // This would use a robust KV parser on the remainder of the string.
            // The method "key_value_extract_from_a1111_block" would internally handle parsing the KV string.
            {
                "target_key": "parameters.steps",
                "method": "key_value_extract_from_a1111_block", // Assumes the KV block after prompts
                "key_name": "Steps", "value_type": "integer"
            },
            {
                "target_key": "parameters.sampler",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Sampler", "value_type": "string"
            },
            {
                "target_key": "parameters.schedule_type", // From your example
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Schedule type", "value_type": "string", "optional": true
            },
            {
                "target_key": "parameters.cfg_scale",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "CFG scale", "value_type": "float"
            },
            {
                "target_key": "parameters.seed",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Seed", "value_type": "integer"
            },
            // Size needs special handling: "Size: WxH"
            {
                "target_key": "parameters.width",
                "method": "key_value_extract_transform_from_a1111_block",
                "key_name": "Size", "value_type": "integer",
                "transform_regex": "^(\\d+)x\\d+$", "transform_group": 1
            },
            {
                "target_key": "parameters.height",
                "method": "key_value_extract_transform_from_a1111_block",
                "key_name": "Size", "value_type": "integer",
                "transform_regex": "^\\d+x(\\d+)$", "transform_group": 1
            },
            {
                "target_key": "parameters.model_hash",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Model hash", "value_type": "string", "optional": true
            },
            {
                "target_key": "parameters.model",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Model", "value_type": "string", "optional": true
            },
            {
                "target_key": "parameters.denoising_strength",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Denoising strength", "value_type": "float", "optional": true
            },
            {
                "target_key": "parameters.clip_skip",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Clip skip", "value_type": "integer", "optional": true
            },
            // Hashes: {"model": "HASH"} - value is stringified JSON
            {
                "target_key": "parameters.tool_specific.hashes_json_str", // Store the stringified JSON
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Hashes", "value_type": "string", "optional": true
            },
            { // Then parse that string if needed by another rule or post-processing
                "target_key": "parameters.tool_specific.hashes_model",
                "method": "json_path_from_string_variable",
                "source_variable_key": "parameters.tool_specific.hashes_json_str", // From previous step
                "json_path": "model",
                "value_type": "string", "optional": true
            },
            {
                "target_key": "parameters.hires_upscale",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Hires upscale", "value_type": "float_or_string", "optional": true // Can be numeric factor or upscaler name
            },
            {
                "target_key": "parameters.hires_steps",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Hires steps", "value_type": "integer", "optional": true
            },
            {
                "target_key": "parameters.hires_upscaler",
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Hires upscaler", "value_type": "string", "optional": true
            },
            {
                "target_key": "parameters.version", // A1111 WebUI Version
                "method": "key_value_extract_from_a1111_block",
                "key_name": "Version", "value_type": "string", "optional": true
            }
        ],
        "output_template": {
            "tool": "A1111 WebUI",
            "prompt": "$prompt",
            "negative_prompt": "$negative_prompt",
            "parameters": {
                "steps": "$parameters.steps",
                "sampler": "$parameters.sampler",
                "cfg_scale": "$parameters.cfg_scale",
                "seed": "$parameters.seed",
                "width": "$parameters.width",   // Will be overridden by context if not found here
                "height": "$parameters.height", // Will be overridden by context if not found here
                "model_hash": "$parameters.model_hash",
                "model": "$parameters.model",
                "denoising_strength": "$parameters.denoising_strength",
                "clip_skip": "$parameters.clip_skip",
                "hires_upscale_factor_or_name": "$parameters.hires_upscale", // Use a more descriptive name
                "hires_steps": "$parameters.hires_steps",
                "hires_upscaler": "$parameters.hires_upscaler",
                "tool_specific": {
                    "schedule_type": "$parameters.schedule_type",
                    "hashes_model": "$parameters.tool_specific.hashes_model",
                    "version": "$parameters.version"
                    // Add other A1111 specific params if needed
                }
            },
            "workflow": null // A1111 doesn't store full workflow in this basic format
        }
    }
}